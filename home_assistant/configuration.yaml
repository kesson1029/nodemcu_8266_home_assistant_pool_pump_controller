homeassistant:
  name: Home
  #unit_system: imperial
  time_zone: America/New_York
#  packages: !include_dir_named packages # package setup
# Example configuration.yaml entry


automation: !include automations.yaml

script: !include scripts.yaml
scene: !include scenes.yaml
sensor:

  - platform: template
    sensors:
      monitor_status:
        value_template: >
          {% if is_state('input_boolean.pool_pump_serial_monitor_on_off', 'on') %}
            Monitor (Active)
          {% else %}
            Monitor (Inactive)
          {% endif %}
          
  - platform: template
    sensors:
      monitor_state:
        friendly_name: "Monitor State"
        value_template: >
          {% if is_state('input_boolean.pool_pump_serial_monitor_on_off', 'on') %}
            On
          {% else %}
            Off
          {% endif %}
          
  - platform: template
    sensors:
      pool_pump_auto_count_down_formatted:
        friendly_name: "Pool Pump Auto Countdown Formatted"
        value_template: >
          {% set raw = states('input_text.countdown_timer_as_text') %}
          {% if ':' in raw %}
            {% set parts = raw.split(':') %}
            {% set part0 = parts[0] | int %}
            {% set part1 = parts[1] | int %}
            {{ '{:02d}:{:02d}'.format(part0, part1) }}
          {% else %}
            {{ raw }}
          {% endif %}
        
         
  - platform: template
    sensors:
      pool_pump_manual_run_time_minutes:
        friendly_name: "Pool Pump Manual Run Time (Minutes)"
        value_template: >
          {% set time = states('input_datetime.pool_pump_manual_run_time') %}
          {% set hours = time[:2] | int %}
          {% set minutes = time[3:5] | int %}
          {% set total_minutes = (hours * 60) + minutes %}
          {{ total_minutes }}
        unit_of_measurement: 'int'

      pool_pump_auto_count_down_minutes:
        friendly_name: "Pool Pump Auto Count Down (Minutes)"
        value_template: >
          {% set time = states('input_datetime.pool_pump_auto_count_down') %}
          {% set hours = time[:2] | int %}
          {% set minutes = time[3:5] | int %}
          {% set total_minutes = (hours * 60) + minutes %}
          {{ total_minutes }}
        unit_of_measurement: 'int'


        
  - platform: template
    sensors:
      pool_pump_state_display:
        friendly_name_template: >
          {% if is_state('binary_sensor.pool_pump_active', 'off') %}
            Off
          {% else %}
            On
          {% endif %}
        value_template: >
          {% if is_state('binary_sensor.pool_pump_active', 'off') %}
            Off
          {% else %}
            On
          {% endif %}
          
      pool_pump_automan_display:
        friendly_name_template: >
          {% if is_state('input_text.filter_status', 'auto') %}
            Auto
          {% else %}
            Manual
          {% endif %}
        value_template: >
          {% if is_state('input_text.filter_status', 'auto') %}
            Auto
          {% else %}
            Manual
          {% endif %}
         
          
  - platform: template
    sensors:
      pool_pump_start_time_1_24h:
        value_template: "{{ states('input_datetime.pool_pump_auto_count_down')[:5] }}"

  - platform: template
    sensors:
      pool_pump_manual_run_time_total_minutes:
        value_template: >
          {% set hours = state_attr('input_datetime.pool_pump_manual_run_time', 'hour') %}
          {% set minutes = state_attr('input_datetime.pool_pump_manual_run_time', 'minute') %}
          {{ (hours * 60) + minutes }}
          
  - platform: template
    sensors:
      countdown_time_total_minutes:
        value_template: >
          {% set time_str = states('sensor.pool_pump_start_time_1_24h') %}
          {% set hours, minutes = time_str.split(':') %}
          {{ (hours | int * 60) + (minutes | int) }}
          
  - platform: template
    sensors:
      countdown_time_hours_minutes:
        friendly_name: 'Countdown Time (Hours:Minutes)'
        value_template: >
          {% set minutes = states('sensor.countdown_time_total_minutes') | int %}
          {% set hours = minutes // 60 %}
          {% set minutes_remainder = minutes % 60 %}
          {% if minutes_remainder < 10 %}
            {{ '{}:0{}'.format(hours, minutes_remainder) }}
          {% else %}
            {{ '{}:{}'.format(hours, minutes_remainder) }}
          {% endif %}
          

  - platform: template
    sensors:
      filter_status_color:
        friendly_name: "Filter Status Color"
        value_template: >
          {% if states('input_text.filter_status') == 'auto' %}
            yellow
          {% else %}
            grey
          {% endif %}
  - platform: template
    sensors:
      bin_present:
        friendly_name: "Bin Present"
        unit_of_measurement: ''
        value_template: >-
          {% if state_attr('vacuum.roomba', 'bin_present')==true %}
          Yes
          {% elif state_attr('vacuum.roomba', 'bin_present')==false %}
          No
          {% else %}
          Unknown
          {% endif %}
       # value_template: "{{ state_attr('vacuum.roomba', 'bin_present') }}"
      bin_full:
        friendly_name: "Bin Full"
        unit_of_measurement: ''
        #value_template: "{{ state_attr('vacuum.roomba', 'bin_full') }}"
        value_template: >-
          {% if  state_attr('vacuum.roomba', 'bin_full')==true %}
          Yes
          {% elif state_attr('vacuum.roomba', 'bin_full')==false %}
          No
          {% else %}
          Unknown
          {% endif %}

  - platform: time_date
    display_options:
      - 'date_time'
      - 'time'
      - 'date'
      - 'date_time'
      - 'date_time_utc'
      - 'date_time_iso'
      - 'time_date'
      - 'time_utc'
 
  
  - platform: mqtt
    name: "Countdown Timer"
    state_topic: "home/sensor/timer/countdown"
    unit_of_measurement: "seconds"

  - platform: mqtt
    name: "Display Text"
    state_topic: "home/display/text"
    


input_boolean:
  track_front_door_motion:
    name: Track Front Door Motion
    initial: on
    icon: mdi:alarm-light

  toggle_led:
    name: Toggle LED

# Example configuration.yaml entry
mqtt:
  sensor:
    - name: "filterStatus"
      state_topic: "home/sensor/filterStatus"
    - name: "filterCommand"
      state_topic: "home/sensor/filterCommand"
    - name: "filterHighLow"
      state_topic: "home/sensor/filterHighLow"

binary_sensor:
  - platform: template
    sensors:
      pool_pump_active:
        value_template: "{{ states('input_text.filter_command') in ['run', 'start'] }}"
        friendly_name: "Pool Pump Active"

